//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PostsDataAccess
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CopProjectDBEntities : DbContext
    {
        public CopProjectDBEntities()
            : base("name=CopProjectDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Organization> Organizations { get; set; }
        public virtual DbSet<Post> Posts { get; set; }
        public virtual DbSet<User> Users { get; set; }
    
        public virtual int spAddOrganization(string orgName)
        {
            var orgNameParameter = orgName != null ?
                new ObjectParameter("OrgName", orgName) :
                new ObjectParameter("OrgName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddOrganization", orgNameParameter);
        }
    
        public virtual int spAddPost(Nullable<int> badge, Nullable<int> orgID, string posterFirstName, string posterLastName, string email, string reportNumber, string postMessage, Nullable<System.DateTime> date, Nullable<int> userId)
        {
            var badgeParameter = badge.HasValue ?
                new ObjectParameter("Badge", badge) :
                new ObjectParameter("Badge", typeof(int));
    
            var orgIDParameter = orgID.HasValue ?
                new ObjectParameter("OrgID", orgID) :
                new ObjectParameter("OrgID", typeof(int));
    
            var posterFirstNameParameter = posterFirstName != null ?
                new ObjectParameter("PosterFirstName", posterFirstName) :
                new ObjectParameter("PosterFirstName", typeof(string));
    
            var posterLastNameParameter = posterLastName != null ?
                new ObjectParameter("PosterLastName", posterLastName) :
                new ObjectParameter("PosterLastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var reportNumberParameter = reportNumber != null ?
                new ObjectParameter("ReportNumber", reportNumber) :
                new ObjectParameter("ReportNumber", typeof(string));
    
            var postMessageParameter = postMessage != null ?
                new ObjectParameter("PostMessage", postMessage) :
                new ObjectParameter("PostMessage", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddPost", badgeParameter, orgIDParameter, posterFirstNameParameter, posterLastNameParameter, emailParameter, reportNumberParameter, postMessageParameter, dateParameter, userIdParameter);
        }
    
        public virtual int spAddUser(Nullable<int> orgID, Nullable<int> badge, string unit, string officerRank, string firstName, string lastName, string email, string password)
        {
            var orgIDParameter = orgID.HasValue ?
                new ObjectParameter("OrgID", orgID) :
                new ObjectParameter("OrgID", typeof(int));
    
            var badgeParameter = badge.HasValue ?
                new ObjectParameter("Badge", badge) :
                new ObjectParameter("Badge", typeof(int));
    
            var unitParameter = unit != null ?
                new ObjectParameter("Unit", unit) :
                new ObjectParameter("Unit", typeof(string));
    
            var officerRankParameter = officerRank != null ?
                new ObjectParameter("OfficerRank", officerRank) :
                new ObjectParameter("OfficerRank", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddUser", orgIDParameter, badgeParameter, unitParameter, officerRankParameter, firstNameParameter, lastNameParameter, emailParameter, passwordParameter);
        }
    
        public virtual ObjectResult<spGetAllOrganizations_Result> spGetAllOrganizations()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllOrganizations_Result>("spGetAllOrganizations");
        }
    
        public virtual ObjectResult<spGetAllPosts_Result> spGetAllPosts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllPosts_Result>("spGetAllPosts");
        }
    
        public virtual ObjectResult<spGetAllUsers_Result> spGetAllUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllUsers_Result>("spGetAllUsers");
        }
    }
}
